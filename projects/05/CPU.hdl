// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //判断指令类型
    DMux(in=true, sel=instruction[15], a=isA, b=isC);
    //处理A寄存器    
    Or(a=isA, b=instruction[5], out=loadToAr); //这两种情况都是要写入,其他则不写入
    Mux4Way16(a=false, b=AluOut, c=instruction, d=instruction, sel[1]=isA, sel[0]=instruction[5], out=ArIn);//根据情况选择A寄存器的输入
    ARegister(in=ArIn, load=loadToAr, out=ArOut, out[0..14] = addressM); //如果是A指令，输入
    //处理D寄存器
    And(a=isC, b=instruction[4], out=AluToDr);
    DRegister(in=AluOut, load=AluToDr, out=DrOut);
    //处理writeM
    And(a=isC, b=instruction[3], out=writeM);
    //处理ALU
    Mux16(a=ArOut, b=inM, sel=instruction[12], out=AluIn2);
    And(a = isC, b = instruction[6], out = no);
    And(a = isC, b = instruction[7], out = f);
    And(a = isC, b = instruction[8], out = ny);
    And(a = isC, b = instruction[9], out = zy);
    And(a = isC, b = instruction[10], out = nx);
    And(a = isC, b = instruction[11], out = zx);
    ALU(x=DrOut, y=AluIn2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=AluOut, out = outM, zr=zr, ng=ng);
    //处理PC
    Or(a=zr, b=ng, out=leq);
    Not(in=leq, out=gt);
    And(a=gt, b=instruction[0], out=jgt);
    And(a=zr, b=instruction[1], out=jeq);
    And(a=ng, b=instruction[2], out=jlt);  //处理是否跳转

    Or(a=jgt, b=jeq, out=jump1);
    Or(a=jump1, b=jlt, out=jump2);
    And(a=isC, b=jump2, out=jump3); //需要是C指令才可能跳转
    PC(in=ArOut, load=jump3, inc=true, reset=reset, out[0..14]=pc);
}