// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int m_maxLength;
    field Array array;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength > 0) {
            let array = Array.new(maxLength);
        }
        let m_maxLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (m_maxLength > 0) {
            do array.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(15);
        }
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(16);
        }
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = m_maxLength) {
            do Sys.error(17);
        }
        let array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum;
        var boolean isNeg;
        var int whileIndex;
        
        if (length = 0) {
            return 0;
        }
    
        let whileIndex = 0;
        if (array[0] = 45) {
            let isNeg = true;
            let whileIndex = whileIndex + 1;
        }
        let sum = 0;
        while ((whileIndex < length) & (array[whileIndex] > 47) & (array[whileIndex] < 58)) {
            let sum = sum * 10 + array[whileIndex] - 48;
            let whileIndex = whileIndex + 1;
        }

        if (isNeg) {
            let sum = -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array numArray;
        var boolean isNeg;
        var int num;
        var int whileCount;

        if (m_maxLength = 0) {
            do Sys.error(19);
        }
        if (val < 0) {
            let isNeg = true;
            let val = -val;
        }
        //16bit最大为65536，再加上一个负号
        let numArray = Array.new(6);
        let whileCount = 0;
        while (val > 0) {
            let num = val - (val / 10 * 10);
            let numArray[whileCount] = num;
            let val = val / 10;
            let whileCount = whileCount + 1;
        }

        let length = 0;
        if (isNeg) {
            do appendChar(45);
        }
        while (whileCount > 0) {
            do appendChar(numArray[whileCount - 1] + 48);
            let whileCount = whileCount - 1;
        }

        do numArray.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
